# linkedlist.py

class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert_at_head(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def insert_at_tail(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def insert_at_position(self, data, position):
        if position == 0:
            self.insert_at_head(data)
            return
        new_node = Node(data)
        current = self.head
        for _ in range(position - 1):
            if current is None:
                return
            current = current.next
        new_node.next = current.next
        current.next = new_node

    def delete_at_head(self):
        if self.head:
            self.head = self.head.next

    def delete_at_tail(self):
        if not self.head:
            return
        if not self.head.next:
            self.head = None
        else:
            current = self.head
            while current.next and current.next.next:
                current = current.next
            current.next = None

    def delete_at_position(self, position):
        if position == 0 and self.head:
            self.delete_at_head()
            return
        current = self.head
        for _ in range(position - 1):
            if current is None:
                return
            current = current.next
        if current and current.next:
            current.next = current.next.next

    def search(self, data):
        current = self.head
        index = 0
        while current:
            if current.data == data:
                return index
            current = current.next
            index += 1
        return -1

    def reverse(self):
        prev = None
        current = self.head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev

    def display(self):
        result = []
        current = self.head
        while current:
            result.append(current.data)
            current = current.next
        return result

    def size(self):
        current = self.head
        count = 0
        while current:
            count += 1
            current = current.next
        return count


# test_linkedlist.py

import unittest
from linkedlist import LinkedList

class TestLinkedList(unittest.TestCase):

    def setUp(self):
        self.ll = LinkedList()

    def test_insert_at_head(self):
        self.ll.insert_at_head(10)
        self.ll.insert_at_head(20)
        self.assertEqual(self.ll.display(), [20, 10])

    def test_insert_at_tail(self):
        self.ll.insert_at_head(10)
        self.ll.insert_at_tail(20)
        self.ll.insert_at_tail(30)
        self.assertEqual(self.ll.display(), [10, 20, 30])

    def test_insert_at_position(self):
        self.ll.insert_at_head(10)
        self.ll.insert_at_tail(30)
        self.ll.insert_at_position(20, 1)
        self.assertEqual(self.ll.display(), [10, 20, 30])

    def test_delete_at_head(self):
        self.ll.insert_at_head(10)
        self.ll.insert_at_head(20)
        self.ll.delete_at_head()
        self.assertEqual(self.ll.display(), [10])

    def test_delete_at_tail(self):
        self.ll.insert_at_head(10)
        self.ll.insert_at_tail(20)
        self.ll.insert_at_tail(30)
        self.ll.delete_at_tail()
        self.assertEqual(self.ll.display(), [10, 20])

    def test_delete_at_position(self):
        self.ll.insert_at_head(10)
        self.ll.insert_at_tail(30)
        self.ll.insert_at_position(20, 1)
        self.ll.delete_at_position(1)
        self.assertEqual(self.ll.display(), [10, 30])

    def test_search(self):
        self.ll.insert_at_head(10)
        self.ll.insert_at_tail(20)
        self.ll.insert_at_tail(30)
        self.assertEqual(self.ll.search(20), 1)
        self.assertEqual(self.ll.search(40), -1)

    def test_reverse(self):
        self.ll.insert_at_head(10)
        self.ll.insert_at_tail(20)
        self.ll.insert_at_tail(30)
        self.ll.reverse()
        self.assertEqual(self.ll.display(), [30, 20, 10])

    def test_size(self):
        self.ll.insert_at_head(10)
        self.ll.insert_at_tail(20)
        self.assertEqual(self.ll.size(), 2)
        self.ll.insert_at_tail(30)
        self.assertEqual(self.ll.size(), 3)


if __name__ == '__main__':
    unittest.main()
